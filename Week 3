//Name: Project 0 Bravo
// Author: Naima Nganga (naimanganga@gmail.com)
// Date: 02/27/2020
// Description: Series of apex methods to demonstrate
// basic understanding of coding concepts.
//
/*
* 1. Return the nth Fibonacci number
* Test Cases:
* Input: 0 Output: 0
* Input: 1 Output: 1
* Input: 2 Output: 1
* Input: 10 Output: 55
*/
//
public class P0B {  
    
    public static Integer nFibonacci( Integer n ){    
    if ( n <= 0){
        return 0;
    }else if ( n == 1 || n == 2){
        return 1;
    }else{ 
        integer position = nFibonacci(n-1)+nFibonacci(n-2);
        return position;
    }
}//control flow statements- The 6 statements

//* 2. Sort an array of integers.
//* Test Cases:
//* Input: [2,4,5,1,3,1] Output: [1,1,2,3,4,5]
//* Input: [5,4,3,2,1] Output: [1,2,3,4,5]

/* Don't use the sort() method... that would be lame.

//	public static List<Integer> sortArray( List<integer> intList ) {
     
  //      integer x;
        //boolean change=false;
    //    do{
            change=false; //to make sure we don't have an infinite loop
        for (integer i = 0; i<intList.size(); i++){
            if(intList[i]>intList[i+1]){
                change=true;
                x=intList[i+1];
               intList[i+1] = intList[i];
                intList[i] = x;
            }
            
           }
    }while(change);
return intList;*/
    public static List<Integer> sortArray( List<integer> intList ) {
      	integer x;
        integer i;
        integer j;
        integer n = intList.size();
        for(i=0; i<n; i++){
        for(j=1; j<n; j++){
            if(intList[j-1]>intList[j]){
                x=intList[j-1];
                intList[j-1] = intList[j];
                intList[j] = x;
            }   
        }     
    	
    }
        system.debug(intList);
        return intList;
    }
    
    
    
        //we need a second loop to ensure that we are going through everything
          // for(Integer currentValue:intList){
              //  if(x<currentValue){
                //    change=true;
            
       
           
     //   
     //   * 3. Return the factorial of n.
/* Test Cases:
/* Input: 0 Output: 1
* Input: 1 Output: 1
* Input: 3 Output: 6
*/

	
public static Integer nFactorial( Integer n) {
    //Integer sum
    integer result; integer i;
 	result = 1;
    //if (n == 0|| n==1){
       // return 1;
    for (i=1; i<=n; i++){
     	result = result * i;
        
      //resultCurrent = result;
      // finalResult = resultCurrent * i;
        
        
        
       // integer resultCurrent = result;
       // finalResult = result * i;
        	//sum = current;
               
            }
  	system.debug(Result);
    return Result;
    }

/*
* 4. Rotate left
* Given an array, array, and an integer, n, rotate the values in array left n times and return array
* Test Cases:
* Input: [1,2,3,4,5], 1 Output: [2,3,4,5,1]
* Input: [1,2,3,4,5], 6 Output: [2,3,4,5,1]
* Input: [1,2,3,4,5], 3 Output: [4,5,1,2,3]
*/
public static Integer[] rotateLeftNTimes( Integer[] Naima , Integer n) {
    //array = 5; n =1;
	//storeArray= Naima [0];
    //array = [1,2,3,4,5]
    for(integer i=0; i<n;i++){
        Naima.add(Naima.get(0));
        Naima.remove(0);
    }
      system.debug(Naima);  
    return Naima;
       
}
          
          
          
          
/* 5. Balanced Brackets
* A bracket is any one of the following: (, ), {, }, [, or ]
*
* The following are balanced brackets:
* ( )
* ( ) ( )
* ( ( ) )
* ( { [ ] } )
*
* The following are NOT balanced brackets:
* (
* )
/* ( */
    
public static Boolean bracketsAreBalanced( String s ) {
   
    Map <String, String> brackets = new Map<String, String>{'('=>')', '{'=>'}', '['=>']'};
    s = s.replaceAll(' ','');
    List<String> strList = s.split('');
    List<String> openedList = new List<String>();
    
   
        for(integer i = 0; i < strList.size();i++){
            if(strList[i+1] == brackets.get(strList[i])){
                openedList.add(strList[i]);
               
            }
        } 
    
    	System.debug(openedList);
    
    	return true;
    }
      /* 
     * 6. Create a method that retrieves a list of all accounts and updates those accounts. 
     *      Create a custom field on the Account standard object called Size__c that will be a  
     * picklist containing small/medium/large. 
     *     Create a method that retrieves a list of all accounts.  
     *         - If an account has between 1-1000 employees then it is classified as small. 
     *         - If an account has between 1001-10000 employees it is classified as medium. 
    *         - If an account has more than 10000 employees it is classified as large. 
     *     Update the Size__c field on each account to reflect the amount of employees in the Account. 
    */ 
     public static void updateAccountSize( ) { 
 List <Account> allAccounts = [SELECT Name, Size__c, NumberofEmployees FROM Account];
        
      	integer i;
      	integer n = allAccounts.size();
        for(i=0; i<n; i++){
            if(allAccounts[i].numberOfEmployees>0 && allAccounts[i].numberOfEmployees<=1000){
                allAccounts[i].Size__c='Small';
            }else if(allAccounts[i].numberOfEmployees>=1001 && allAccounts[i].numberOfEmployees<=10000){
                allAccounts[i].Size__c='Medium';
            }else if(allAccounts[i].numberOfEmployees>10000){
                allAccounts[i].Size__c='Large';
            }
            update allAccounts;
            //Test.stopTest();
           
            }   
            }    
    /*  

 
 
     * 7. Create a method that will find all leads that contain 'ca' in their fields.  
     *     If a lead is located in California(CA), change their Lead Status field to 'Closed - Not  
     * Converted' and their description should display the message, "We are no longer doing  
     * business in California." 
     */ 
    public static void updateCALeads() {
      List<Lead>leadStatus = [SELECT Name, State, Status FROM Lead WHERE State ='CA'];
        for(Lead newLead: leadStatus){
            newLead.Status='Closed-Not Converted';
            newLead.description= 'We are no longer doing business in California';
             }
        update leadStatus;                       
}
    
      /* 
     * 8. Create a method that will find all Opportunities which have already passed their Close Date  
     * and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and  
     * they are not marked as 'Closed Won', they should be marked as 'Closed Lost'. 
     */ 
    public static void closePastDueOpportunities( ) { 
        List<opportunity> alreadyPassed =[SELECT Name, StageName, CloseDate FROM Opportunity WHERE CloseDate>Today AND StageName != 'Closed Won'];
        for(opportunity nowLost: alreadyPassed){
            nowLost.StageName= 'Closed Lost';
        }
        update alreadyPassed;
        
    }
}
@isTest
public class P0BTest {
 
    @isTest
    public static void nFibonacciTest(){
     
        P0B test= new P0B();
        
        Integer result= P0B.nFibonacci(0);
        system.assertEquals(0,result);
       
        result = P0B.nFibonacci(1);
        system.assertEquals(1,result);
       
        result = P0B.nFibonacci(2);
        system.assertEquals(1,result);
        
        result= P0B.nFibonacci(10);
        system.assertEquals(55,result);

}
}
